-- Migration Script: Create New Org Agent Architecture
-- This script creates the new org_agents and agent_blueprints tables
-- Run this AFTER dropping the old tables

-- Create org_agents table (lightweight management layer)
CREATE TABLE org_agents (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    agent_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    org_id UUID NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'deactive', 'delete')),
    created_by VARCHAR(255) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    current_blueprint_id UUID, -- Will be set after agent_blueprints is created
    
    -- Foreign key constraints
    FOREIGN KEY (org_id) REFERENCES organization(id) ON DELETE CASCADE,
    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE
);

-- Create agent_blueprints table (versioned blueprint definitions)
CREATE TABLE agent_blueprints (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    agent_id UUID NOT NULL,
    version INTEGER NOT NULL DEFAULT 1,
    agent_blueprint JSONB NOT NULL DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by VARCHAR(255) NOT NULL,
    conversation_id VARCHAR(255), -- Optional link to conversation that created this blueprint
    
    -- Foreign key constraints
    FOREIGN KEY (agent_id) REFERENCES org_agents(id) ON DELETE CASCADE,
    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE,
    
    -- Ensure unique version per agent
    UNIQUE(agent_id, version)
);

-- Add foreign key from org_agents to agent_blueprints (current blueprint)
ALTER TABLE org_agents 
ADD CONSTRAINT fk_current_blueprint 
FOREIGN KEY (current_blueprint_id) REFERENCES agent_blueprints(id) ON DELETE SET NULL;

-- Create function to automatically update updated_at column
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger for org_agents updated_at
CREATE TRIGGER update_org_agents_updated_at 
    BEFORE UPDATE ON org_agents 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Create indexes for org_agents
CREATE INDEX idx_org_agents_org_id ON org_agents(org_id);
CREATE INDEX idx_org_agents_status ON org_agents(status);
CREATE INDEX idx_org_agents_created_by ON org_agents(created_by);
CREATE INDEX idx_org_agents_created_at ON org_agents(created_at);
CREATE INDEX idx_org_agents_name ON org_agents(name);
CREATE INDEX idx_org_agents_current_blueprint ON org_agents(current_blueprint_id);

-- Create composite indexes for common queries
CREATE INDEX idx_org_agents_org_status ON org_agents(org_id, status);
CREATE INDEX idx_org_agents_org_created_by ON org_agents(org_id, created_by);

-- Create indexes for agent_blueprints
CREATE INDEX idx_agent_blueprints_agent_id ON agent_blueprints(agent_id);
CREATE INDEX idx_agent_blueprints_version ON agent_blueprints(agent_id, version);
CREATE INDEX idx_agent_blueprints_created_at ON agent_blueprints(created_at);
CREATE INDEX idx_agent_blueprints_created_by ON agent_blueprints(created_by);
CREATE INDEX idx_agent_blueprints_conversation ON agent_blueprints(conversation_id);

-- Create GIN index for JSONB agent_blueprint for efficient JSON queries
CREATE INDEX idx_agent_blueprints_blueprint_gin ON agent_blueprints USING GIN (agent_blueprint);

-- Create view for active agents with their current blueprints
CREATE VIEW active_agents_with_blueprints AS
SELECT 
    a.id,
    a.agent_id,
    a.org_id,
    a.name,
    a.description,
    a.status,
    a.created_by,
    a.created_at,
    a.updated_at,
    b.id as blueprint_id,
    b.version as blueprint_version,
    b.agent_blueprint,
    b.conversation_id
FROM org_agents a
LEFT JOIN agent_blueprints b ON a.current_blueprint_id = b.id
WHERE a.status = 'active';

-- Function to get latest blueprint version for an agent
CREATE OR REPLACE FUNCTION get_latest_blueprint_version(agent_uuid UUID)
RETURNS INTEGER AS $$
BEGIN
    RETURN COALESCE((
        SELECT MAX(version) 
        FROM agent_blueprints 
        WHERE agent_id = agent_uuid
    ), 0);
END;
$$ LANGUAGE plpgsql;

-- Function to create new blueprint version
CREATE OR REPLACE FUNCTION create_blueprint_version(
    agent_uuid UUID,
    blueprint_data JSONB,
    creator_id VARCHAR(255),
    conv_id VARCHAR(255) DEFAULT NULL
)
RETURNS UUID AS $$
DECLARE
    new_version INTEGER;
    blueprint_id UUID;
BEGIN
    -- Get next version number
    new_version := get_latest_blueprint_version(agent_uuid) + 1;
    
    -- Insert new blueprint
    INSERT INTO agent_blueprints (agent_id, version, agent_blueprint, created_by, conversation_id)
    VALUES (agent_uuid, new_version, blueprint_data, creator_id, conv_id)
    RETURNING id INTO blueprint_id;
    
    -- Update current_blueprint_id in org_agents
    UPDATE org_agents 
    SET current_blueprint_id = blueprint_id 
    WHERE id = agent_uuid;
    
    RETURN blueprint_id;
END;
$$ LANGUAGE plpgsql;

-- Confirmation message
SELECT 'New org_agents architecture created successfully' as migration_status;