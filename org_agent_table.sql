-- Organization Agents Table Schema
-- This creates the database schema for managing agents within organizations

-- Agents table - represents AI agents within organizations
CREATE TABLE org_agents (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  agent_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
  org_id UUID NOT NULL,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  system_prompt JSONB DEFAULT '{}',
  tools_list JSONB DEFAULT '[]',
  knowledge_list JSONB DEFAULT '[]',
  status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'deactive', 'delete')),
  created_by VARCHAR(255) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  FOREIGN KEY (org_id) REFERENCES organization(id) ON DELETE CASCADE,
  FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE
);

-- Function to automatically update updated_at column
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger to call the function before any update on org_agents table
CREATE TRIGGER update_org_agents_updated_at 
    BEFORE UPDATE ON org_agents 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Create indexes for better performance
CREATE INDEX idx_org_agents_org_id ON org_agents(org_id);
CREATE INDEX idx_org_agents_status ON org_agents(status);
CREATE INDEX idx_org_agents_created_by ON org_agents(created_by);
CREATE INDEX idx_org_agents_created_at ON org_agents(created_at);
CREATE INDEX idx_org_agents_name ON org_agents(name);

-- Create composite indexes for common queries
CREATE INDEX idx_org_agents_org_status ON org_agents(org_id, status);
CREATE INDEX idx_org_agents_org_created_by ON org_agents(org_id, created_by);

-- Create a view for active agents only
CREATE VIEW active_org_agents AS
SELECT 
    id,
    agent_id,
    org_id,
    name,
    description,
    system_prompt,
    tools_list,
    knowledge_list,
    created_by,
    created_at,
    updated_at
FROM org_agents 
WHERE status = 'active';

-- Optional: Add RLS (Row Level Security) if needed
-- ALTER TABLE org_agents ENABLE ROW LEVEL SECURITY;

-- Create policy examples (uncomment if RLS is needed)
-- CREATE POLICY "Users can view agents in their organizations" ON org_agents
--   FOR SELECT USING (
--     EXISTS (
--       SELECT 1 FROM user_organizations 
--       WHERE user_id = auth.uid() AND org_id = org_agents.org_id
--     )
--   );

-- CREATE POLICY "Users can create agents in their organizations" ON org_agents
--   FOR INSERT WITH CHECK (
--     EXISTS (
--       SELECT 1 FROM user_organizations 
--       WHERE user_id = auth.uid() AND org_id = org_agents.org_id
--     )
--   );

-- CREATE POLICY "Users can update agents in their organizations" ON org_agents
--   FOR UPDATE USING (
--     EXISTS (
--       SELECT 1 FROM user_organizations 
--       WHERE user_id = auth.uid() AND org_id = org_agents.org_id
--     )
--   );

-- CREATE POLICY "Users can delete agents in their organizations" ON org_agents
--   FOR DELETE USING (
--     EXISTS (
--       SELECT 1 FROM user_organizations 
--       WHERE user_id = auth.uid() AND org_id = org_agents.org_id
--     )
--   ); 